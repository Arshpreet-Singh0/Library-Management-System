// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  name           String?
  email          String      @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           UserRole    @default(STUDENT)
  sessions       Session[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  BookIssue      BookIssue[]
  fine           Float       @default(0.0)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id              String      @id @default(cuid())
  title           String
  isbn            String      @unique
  description     String?
  coverImage      String?
  publishedYear   Int?
  publisher       String?
  location        String?
  totalCopies     Int         @default(1)
  availableCopies Int         @default(1)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  authors         String[]
  genre           String
  bookIssues      BookIssue[]
}

model BookIssue {
  id         String      @id @default(cuid())
  book       Book        @relation(fields: [bookId], references: [id], onDelete: Cascade) // Add cascade
  bookId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade) // Add cascade
  userId     String
  issueDate  DateTime    @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     IssueStatus @default(ACTIVE)
  fine       Float?      @default(0) // Default fine value
  condition  String?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum UserRole {
  ADMIN
  LIBRARIAN
  STUDENT
  FACULTY
}

enum IssueStatus {
  ACTIVE
  RETURNED
  OVERDUE
  LOST
}
